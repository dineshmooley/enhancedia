// This is your Prisma schema file,

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model staff {
    id           String       @id @default(auto()) @map("_id") @db.ObjectId
    roll_no      String       @unique
    email        String       @unique
    password     String
    name         String
    role         String
    departmentId String?      @db.ObjectId
    department   departments? @relation(fields: [departmentId], references: [id])
}

model student {
    id              String   @id @default(auto()) @map("_id") @db.ObjectId
    register_number String   @unique
    email           String   @unique
    name            String
    password        String
    role            String
    classId         String   @db.ObjectId
    class           classes? @relation(fields: [classId], references: [id])
    results         result[]
}

model departments {
    id      String    @id @default(auto()) @map("_id") @db.ObjectId
    name    String    @unique
    classes classes[]
    staffs  staff[]
}

model classes {
    id           String      @id @default(auto()) @map("_id") @db.ObjectId
    regulation   Int
    batch        Int
    section      String?
    archived     Boolean     @default(false)
    departmentId String      @db.ObjectId
    department   departments @relation(fields: [departmentId], references: [id], onDelete: Cascade)
    students     student[]
    tests        test[]
    result       result[]
}

model test {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    description String
    created_at  DateTime @default(now())
    duration    Int?
    start_time  DateTime
    end_time    DateTime
    score       Int?
    Total       Int?
    classId     String   @db.ObjectId
    class       classes  @relation(fields: [classId], references: [id])
    results     result[]
}

model questions {
    id       String   @id @default(auto()) @map("_id") @db.ObjectId
    question String
    marks    Int?
    topic    String?
    type     String
    answer   String?
    code     String?
    choice   String[]
    testId   String[] @db.ObjectId
}

model result {
    id                String   @id @default(auto()) @map("_id") @db.ObjectId
    studentId         String   @db.ObjectId
    student           student  @relation(fields: [studentId], references: [id])
    testId            String   @db.ObjectId
    test              test     @relation(fields: [testId], references: [id])
    classId           String   @db.ObjectId
    class             classes  @relation(fields: [classId], references: [id])
    openness          Float?
    conscientiousness Float?
    extraversion      Float?
    agreeableness     Float?
    neuroticism       Float?
    aptitude          Float?
    core              Float?
    answers           String[]
    score             Float?
    status            String
    started_at        DateTime
    ended_at          DateTime
}
